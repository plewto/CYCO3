;;;; CYCO plugins sj eastwest mor2 drums.lisp
;;;;
;;;; m2-drums
;;;;    m2-kick
;;;;    m2-snare
;;;;    m2-tom
;;;;    m2-cow
;;;;    m2-hat
;;;;    m2-cym
;;;;    m2-ride
;;;;
;;;; When using "light-load" sample set, some full-load assignments
;;;; are duplicated.  Full and light modes use identical key-sets.
;;;; m2-ride instrument is a subset of m2-cym.
;;;;


(param m2-kick nil)
(param m2-snare nil)
(param m2-tom nil)
(param m2-cow nil)
(param m2-hat nil)
(param m2-cym nil)
(param m2-ride nil)

(let* ((kick-list '((A . (35))
		    (B . (36))
		    (C . (59))
		    (D . (60))))
       (kick-light-list '((A . (35))
			  (B . (36))
			  (C . (35))
			  (D . (36))))
       (snare-list '((X       . (38))
		     (RIM     . (37))
		     (CRACK   . (39))
		     (EDGE    . (40))
		     (BOUNCE  . (62))
		     (FLAM    . (63))
		     (ROLL    . (64))
		     (X2      . (86))
		     (RIM2    . (85))
		     (CRACK2  . (87))
		     (EDGE2   . (88))
		     (A       . (38 "Emu Compatibility -> X"))
		     (B       . (40 "Emu Compatibility -> Edge"))
		     (C       . (62 "Emu Compatibility -> Bounce"))
		     (D       . (37 "Emu Compatibility -> Crack"))))
       (snare-light-list '((X       . (38))
			   (RIM     . (37))
			   (CRACK   . (39))
			   (EDGE    . (40))
			   (BOUNCE  . (40))
			   (FLAM    . (38))
			   (ROLL    . (40))
			   (X2      . (38))
			   (RIM2    . (37))
			   (CRACK2  . (39))
			   (EDGE2   . (40))
			   (A       . (38 "Emu Compatibility -> X"))
			   (B       . (40 "Emu Compatibility -> Edge"))
			   (C       . (40 "Emu Compatibility -> Bounce"))
			   (D       . (37 "Emu Compatibility -> Crack"))))
       (tom-list '((A         . (41))
		   (B         . (43))
		   (C         . (45))
		   (D         . (47))
		   (E         . (48))
		   (F         . (50))
		   (A-FLAM    . (65))
		   (B-FLAM    . (67))
		   (C-FLAM    . (69))
		   (D-FLAM    . (71))
		   (E-FLAM    . (72))
		   (F-FLAM    . (74))
		   (A-BOUNCE  . (89))
		   (B-BOUNCE  . (91))
		   (C-BOUNCE  . (93))
		   (D-BOUNCE  . (95))
		   (E-BOUNCE  . (96))
		   (F-BOUNCE  . (98))))
       (tom-light-list '((A         . (41))
			 (B         . (43))
			 (C         . (45))
			 (D         . (47))
			 (E         . (48))
			 (F         . (50))
			 (A-FLAM    . (41))
			 (B-FLAM    . (43))
			 (C-FLAM    . (45))
			 (D-FLAM    . (47))
			 (E-FLAM    . (48))
			 (F-FLAM    . (50))
			 (A-BOUNCE  . (41))
			 (B-BOUNCE  . (43))
			 (C-BOUNCE  . (45))
			 (D-BOUNCE  . (47))
			 (E-BOUNCE  . (48))
			 (F-BOUNCE  . (50))))
       (cow-list '((A . (32))
		   (B . (31))
		   (C . (33))))
       
       (hat-list '((X       . (42 "closed"))
		   (OP      . (44 "1/3 open"))
		   (OPN     . (46 "2/3 open"))
		   (OPEN    . (49 "full open"))
		   (PED     . (34 "Pedal"))
		   (EDGE    . (66 "closed edge hit"))
		   (EOP     . (68 "1/3 open"))
		   (EOPN    . (70 "2/3 open"))
		   (EOPEN   . (73 "full open"))
		   (BELL    . (90 "closed"))
		   (BOP     . (92 "1/3 open"))
		   (BOPN    . (94 "2/3 open"))
		   (BOPEN   . (97 "full open"))
		   (STOMP   . (34 "Emu compatibility"))
		   (STOMP2  . (34 "Emu compatibility"))
		   (x2      . (42 "Emu compatibility"))
		   (op2     . (44 "Emu compatibility"))
		   (opn2    . (46 "Emu compatibility"))
		   (open2   . (49 "Emu compatibility"))))
       (hat-light-list '((X       . (42 "closed"))
			 (OP      . (44 "1/3 open"))
			 (OPN     . (46 "2/3 open"))
			 (OPEN    . (49 "full open"))
			 (PED     . (34 "Pedal"))
			 (EDGE    . (42 "closed"))
			 (EOP     . (44 "1/3 open"))
			 (EOPN    . (46 "2/3 open"))
			 (EOPEN   . (49 "full open"))
			 (BELL    . (42 "closed"))
			 (BOP     . (44 "1/3 open"))
			 (BOPN    . (46 "2/3 open"))
			 (BOPEN   . (49 "full open"))
			 (STOMP   . (34 "Emu compatibility"))
			 (STOMP2  . (34 "Emu compatibility"))
			 (x2      . (42 "Emu compatibility"))
			 (op2     . (44 "Emu compatibility"))
			 (opn2    . (46 "Emu compatibility"))
			 (open2   . (49 "Emu compatibility"))))
       (cym-list '((RIDE      . (51))
		   (A         . (52))
		   (A-CHOKE   . (53))
		   (B         . (54))
		   (B-CHOKE   . (55))
		   (C         . (56))
		   (C-CHOKE   . (57))
		   (EDGE      . (75))
		   (A-MID     . (76))
		   (B-MID     . (78))
		   (BELL      . (99))
		   (BELL2    . (100))))
       (cym-light-list '((RIDE      . (51))
			 (A         . (52))
			 (A-CHOKE   . (53))
			 (B         . (54))
			 (B-CHOKE   . (55))
			 (C         . (56))
			 (C-CHOKE   . (57))
			 (EDGE      . (51))
			 (A-MID     . (52))
			 (B-MID     . (54))
			 (BELL      . (99))
			 (BELL2    . (100))))
       (ride-list '((X   . ( 52 "Duplicates cym ride"))
		    (edge  . ( 75 "Duplicates cym edge"))
		    (bell  . ( 99 "Duplicates cym bell"))
		    (bell2 . (100 "Duplicates cym bell2"))))
       (composite-list '((KICK-A        . (35))
			 (KICK-B        . (36))
			 (KICK-C        . (59))
			 (KICK-D        . (60))
			 (SNARE-X       . (38))
			 (SNARE-RIM     . (37))
			 (SNARE-CRACK   . (39))
			 (SNARE-EDGE    . (40))
			 (SNARE-BOUNCE  . (62))
			 (SNARE-FLAM    . (63))
			 (SNARE-ROLL    . (64))
			 (SNARE-X2      . (86))
			 (SNARE-RIM2    . (85))
			 (SNARE-CRACK2  . (87))
			 (SNARE-EDGE2   . (88))
			 (TOM-A         . (41))
			 (TOM-B         . (43))
			 (TOM-C         . (45))
			 (TOM-D         . (47))
			 (TOM-E         . (48))
			 (TOM-F         . (50))
			 (TOM-A-FLAM    . (65))
			 (TOM-B-FLAM    . (67))
			 (TOM-C-FLAM    . (69))
			 (TOM-D-FLAM    . (71))
			 (TOM-E-FLAM    . (72))
			 (TOM-F-FLAM    . (74))
			 (TOM-A-BOUNCE  . (89))
			 (TOM-B-BOUNCE  . (91))
			 (TOM-C-BOUNCE  . (93))
			 (TOM-D-BOUNCE  . (95))
			 (TOM-E-BOUNCE  . (96))
			 (TOM-F-BOUNCE  . (98))
			 (COW-A         . (32))
			 (COW-B         . (31))
			 (COW-C         . (33))
			 (HAT-X         . (42))
			 (HAT-OP        . (44))
			 (HAT-OPN       . (46))
			 (HAT-OPEN      . (49))
			 (HAT-PED       . (34))
			 (HAT-EDGE      . (66))
			 (HAT-EOP       . (68))
			 (HAT-EOPN      . (70))
			 (HAT-EOPEN     . (73))
			 (HAT-BELL      . (90))
			 (HAT-BOP       . (92))
			 (HAT-BOPN      . (94))
			 (HAT-BOPEN     . (97))
			 (CYM-RIDE      . (51))
			 (CYM-A         . (52))
			 (CYM-A-CHOKE   . (53))
			 (CYM-B         . (54))
			 (CYM-B-CHOKE   . (55))
			 (CYM-C         . (56))
			 (CYM-C-CHOKE   . (57))
			 (CYM-EDGE      . (75))
			 (CYM-A-MID     . (76))
			 (CYM-B-MID     . (78))
			 (CYM-BELL      . (99))
			 (CYM-BELL2    . (100))))
       (kick-map (symbolic-keynumber-map kick-list))
       (snare-map (symbolic-keynumber-map snare-list))
       (tom-map (symbolic-keynumber-map tom-list))
       (cow-map (symbolic-keynumber-map cow-list))
       (hat-map (symbolic-keynumber-map hat-list))
       (cym-map (symbolic-keynumber-map cym-list))
       (ride-map (symbolic-keynumber-map ride-list))
       (kick-light-map (symbolic-keynumber-map kick-light-list))
       (snare-light-map (symbolic-keynumber-map snare-light-list))
       (tom-light-map (symbolic-keynumber-map tom-light-list))
       (hat-light-map (symbolic-keynumber-map hat-light-list))
       (cym-light-map (symbolic-keynumber-map cym-light-list)) )
  (instrument m2-kick :parent ew-drums :remarks "Ministry of Rock Drums" :transient nil)
  (instrument m2-snare :parent ew-drums :remarks "Ministry of Rock Drums" :transient nil)
  (instrument m2-tom :parent ew-drums :remarks "Ministry of Rock Drums" :transient nil)
  (instrument m2-cow :parent ew-drums :remarks "Ministry of Rock Drums" :transient nil)
  (instrument m2-hat :parent ew-drums :remarks "Ministry of Rock Drums" :transient nil)
  (instrument m2-cym :parent ew-drums :remarks "Ministry of Rock Drums" :transient nil)
  (instrument m2-ride :parent m2-cym :remarks "Ministry of Rock Drums" :transient nil)
  ;; (symbolic-keynumber-map composite-list :instrument ew-drums)
  (keynumber-map! ew-drums (symbolic-keynumber-map composite-list))
  
  (defun ew-drums (&optional light-load)
    "Select EW-DRUMS keynumber-map 
light-load nil -> Use default full-load map
light-load t   -> Use light-load map"
    (if light-load
	(progn
	  (format t "EW-DRUMS using light-load map~%")
	  (keynumber-map! m2-kick kick-light-map)
	  (keynumber-map! m2-snare snare-light-map)
	  (keynumber-map! m2-tom tom-light-map)
	  (keynumber-map! m2-hat hat-light-map)
	  (keynumber-map! m2-cym cym-light-map))
      (progn
	(format t "EW-DRUMS using full-load map~%")
	(keynumber-map! m2-kick kick-map)
	(keynumber-map! m2-snare snare-map)
	(keynumber-map! m2-tom tom-map)
	(keynumber-map! m2-hat hat-map)
	(keynumber-map! m2-cym cym-map)))
    (keynumber-map! m2-cow cow-map)
    (keynumber-map! m2-ride ride-map)
    ew-drums)) 

  

