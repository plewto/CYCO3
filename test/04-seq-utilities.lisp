;;;; test 04-seq-utilities
;;;;

(let ((test-list '(A B C)))
  (pass? "->list 4.1" (equal (->list 'APE) '(APE)))
  (pass? "->list 4.2" (eq (->list test-list) test-list))
  (pass? "->list 4.3" (eq (final test-list) 'C))
  (pass? "->list 4.4" (equal (butfinal test-list) '(A B)))
  (pass? "->list 4.5" (and (eq (cnth 1 test-list)(cnth 4 test-list))))
  (pass? "slice 4.6" (equal (slice test-list 0) test-list))
  (pass? "slice 4.7" (equal (slice test-list 1) (cdr test-list)))
  (pass? "slice 4.8" (equal (slice test-list 0 -1) (butfinal test-list)))
  (pass? "flatten1 4.9" (equal (flatten1 '(A B (C D (E)))) '(A B C D (E))))
  (pass? "flatten 4.10" (equal (flatten '(A B (C (D)))) '(A B C D)))
  (pass? "rotate +1 4.11" (equal (rotate test-list +1) '(B C A)))
  (pass? "rotate -1 4.12" (equal (rotate test-list -1) '(C A B)))
  (pass? "zip 4.13" (equal (zip '(A B C) '(E F G)) '(A E B F C G)))
  (pass? "palindrome 4.14" (equal (palindrome '(A B C)) '(A B C C B A)))
  (pass? "range 4.15" (= 55 (apply #'+ (range 0 11))))
  (pass? "fill-list 4.16" (equal (fill-list '(A nil C) '(W X Y Z)) '(A X C Z))))

(multiple-value-bind (head tail)(split-list '(:ape 1 2 :bat 3 4 :cat 5 6))
  (pass? "split-list 4.17" (and (equal head '(:ape 1 2))
			   (equal tail '(:bat 3 4 :cat 5 6)))))

(let* ((test-list '(A B C D))
       (frequency-table (make-hash-table :size (length test-list)))
       (test-runs 1000))
  (dolist (key test-list)
    (setf (gethash key frequency-table) 0))
  (dotimes (i test-runs)
    (let ((selected (pick test-list)))
      (setf (gethash selected frequency-table)
	    (1+ (gethash selected frequency-table)))))
  (maphash #'(lambda (key count)
	       (let ((relative-frequency (float (/ count test-runs))))
		 (pass? (sformat "pick 4.17 ~A  " key)
			(and (<= 0.2 relative-frequency)
			     (<= relative-frequency 0.3)))))
	   frequency-table))

(let* ((test-list '(A B C))
       (frequency-table (make-hash-table :size 6 :test #'equal))
       (test-runs 1000))
  (setf (gethash '(A B C) frequency-table) 0)
  (setf (gethash '(A C B) frequency-table) 0)
  (setf (gethash '(B A C) frequency-table) 0)
  (setf (gethash '(B C A) frequency-table) 0)
  (setf (gethash '(C A B) frequency-table) 0)
  (setf (gethash '(C B A) frequency-table) 0)
  (dotimes (i test-runs)
    (let ((selected (permute test-list)))
      (setf (gethash selected frequency-table)
  	    (1+ (gethash selected frequency-table)))))
  (maphash #'(lambda (key count)
	       (let ((relative-frequency (float (/ count test-runs))))
		 (pass? (sformat "permute 4.18 ~A   **** TEST IS PROBABILISTIC, EXPECT AN OCCASIONAL FAIL ****" key)
			(and (<= 0.10 relative-frequency)
			     (<= relative-frequency 0.2)))))
	   frequency-table))

(let ((test-list '(A B C))
      (test-vector #(X Y Z)))
  (pass? "->vector 4.19" (let ((rs (->vector 'A)))
			(and (vectorp rs)
			     (= (length rs) 1)
			     (eq (aref rs 0) 'A))))
  (pass? "->vector 4.20" (let ((rs (->vector test-list)))
			(and (vectorp rs)
			     (= (length rs)(length test-list))
			     (eq (nth 0 test-list)(aref rs 0))
			     (eq (nth 1 test-list)(aref rs 1))
			     (eq (nth 2 test-list)(aref rs 2)))))
  (pass? "->vector 4.21" (eq (->vector test-vector) test-vector)))
			     

